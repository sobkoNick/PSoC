;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: ADC.inc
;;  Version: 1.1, Updated on 2011/3/29 at 14:28:42
;;  Generated by PSoC Designer 5.1.2110.0
;;
;;  DESCRIPTION: Assembler declarations for the ADCINC A/D Converter
;;               User Module with a 1st-order modulator.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
;--------------------------------------------------
; Constants for ADC API's.
;--------------------------------------------------

ADC_OFF:                        equ 00h
ADC_LOWPOWER:                   equ 01h
ADC_MEDPOWER:                   equ 02h
ADC_HIGHPOWER:                  equ 03h

ADC_bNUMBITS:                   equ 08h
ADC_NoAZ:                       equ 1
ADC_SIGNED_DATA:                equ 0
ADC_9_OR_MORE_BITS:             equ ((08h - 1)& 08h)
ADC_8_OR_MORE_BITS:             equ ((08h )& 08h)
;--------------------------------------------------
; Register Address Constants for ADC
;--------------------------------------------------
ADC_ISR_MASK:                          equ 01h
ADC_ISR_REG:                           equ 0e1h
ADC_CLR_REG:                           equ (((ADC_ISR_REG & 038h)/8)^0dfh)

ADC_PWMdr0:                    equ 20h     ; Period reg
ADC_PWMdr1:                    equ 21h     ; Down count reg
ADC_PWMdr2:                    equ 22h     ; Compare reg
ADC_PWMcr0:                    equ 23h     ; Control reg
ADC_PWMfn:                     equ 20h     ; Function reg
ADC_PWMsl:                     equ 21h     ; Input  select reg
ADC_PWMos:                     equ 22h     ; Output select reg

ADC_AtoDcr0:                   equ 84h     ; SC Block Control Reg 0
ADC_AtoDcr1:                   equ 85h     ; SC Block Control Reg 1
ADC_AtoDcr2:                   equ 86h     ; SC Block Control Reg 2
ADC_AtoDcr3:                   equ 87h     ; SC Block Control Reg 3

HighByte: equ 0
LowByte:  equ 1

macro ADC_fIsDataAvailable_M
   RAM_SETPAGE_CUR >ADC_fStatus
   mov A,[ADC_fStatus]
endm


macro ADC_iGetData_M
   RAM_SETPAGE_CUR >ADC_iResult
   mov X,[(ADC_iResult + HighByte)]
   mov A,[(ADC_iResult + LowByte)]
endm


macro ADC_wGetData_M
   ADC_iGetData_M
endm


macro ADC_cGetData_M
   RAM_SETPAGE_CUR >ADC_iResult
   mov A,[(ADC_iResult + LowByte)]
endm


macro ADC_bGetData_M
   ADC_cGetData_M
endm


macro ADC_fClearFlag_M
   RAM_SETPAGE_CUR >ADC_fStatus
   mov A,[ADC_fStatus]
   mov [ADC_fStatus],00h
endm


macro ADC_iClearFlagGetData_M
   RAM_SETPAGE_CUR >ADC_fStatus
  .repeat:
      mov [ADC_fStatus],00h
      mov X,[(ADC_iResult + HighByte)]
      mov A,[(ADC_iResult + LowByte)]
      cmp [ADC_fStatus],00h
  .until: jnz .repeat
endm


macro ADC_wClearFlagGetData_M
   ADC_iClearFlagGetData_M
endm


macro ADC_cClearFlagGetData_M
   RAM_SETPAGE_CUR >ADC_fStatus
   mov [ADC_fStatus],00h
   mov A,[(ADC_iResult + LowByte)]
endm


macro ADC_bClearFlagGetData_M
   ADC_cClearFlagGetData_M
endm

macro ADC_ENABLE_INTEGRATOR_M  
   and reg[ADC_AtoDcr3],~10h
   IF ADC_NoAZ
   and reg[ADC_AtoDcr2],~20h
   ENDIF
endm


macro ADC_RESET_INTEGRATOR_M  
   IF ADC_NoAZ
   or  reg[ADC_AtoDcr2],20h
   ENDIF
   or  reg[ADC_AtoDcr3],10h
endm


macro ADC_STARTADC_M  
   ;Enable PWM interrupt
   mov reg[ADC_CLR_REG],~(ADC_ISR_MASK)
   or  reg[ADC_ISR_REG], (ADC_ISR_MASK)
endm


macro ADC_STOPADC_M
   ;Disable PWM interrupt  
   and reg[ADC_ISR_REG],~(ADC_ISR_MASK)
endm


macro ADC_WritePulseWidth_M
   mov reg[ADC_PWMdr2],A
endm

; end of file ADC.inc
